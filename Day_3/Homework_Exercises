A. Given the following data structure:

lines = ['Gyle Centre', 'Edinburgh Park', 'Murrayfield Stadium', 'Haymarket', 'Princes Street']


1) Work out how many stops there are in the current west array

  There are 5 stops and I worked this out by using: lines.count

2) Return 'Edinburgh Park' from the array

  I returned 'Edinburgh Park' by using: lines[1] 
  as it is second in the array and since arrays 
  start at 0 it's value is 1

3) How many ways can we return 'Princes Street' from the array?

  There are 4 ways to return 'Princess Street'; 
    -lines[5]
    -lines[-1]
    -lines.last
    -lines
  The first three will return just 'Princes Street', number 1 uses its position in the array to locate and display it, number 2 does this in reverse but due to the fact that it starts from -1 and not 0 it is lines[-1] rather than lines[-0], and lines.last displays the last object in an array. The fourth way to display it will display the full array and not just the one station.

4) Work out the index position of 'Haymarket'

  The index position of Haymarket is 3. I found this by using; lines.index("Haymarket")

4) Add 'Airport' to the start of the array

  ["Airport", "Gyle Centre", "Edinburgh Park", "Murrayfield Stadium", "Haymarket", "Princes Street"]

  I achieved this by doing; lines.unshift("Airport")

5) Add 'York Place' to the end of the array
  
  ["Airport", "Gyle Centre", "Edinburgh Park", "Murrayfield Stadium", "Haymarket", "Princes Street", "York Place"]

  I achieved this by doing: lines.push("York Place")

6) Remove 'Edinburgh Park' from the array using it's name
  
  ["Airport", "Gyle Centre", "Murrayfield Stadium", "Haymarket", "Princes Street", "York Place"]

  I achieved this by doing: lines.delete("Edinburgh Park"), this 
  searches the array and delletes all instances of "Edinburgh Park"

7) Delete 'Edinburgh Park' from the array by index

  //I reinserted Edinburgh park by using the comand; 
  lines.insert(2, "Edinburgh Park"). This inserts the 
  second station before the station in the position indicated 
  by the first argument.//

  ["Airport", "Gyle Centre", "Murrayfield Stadium", "Haymarket", "Princes Street", "York Place"]

  I achieved this by doing; lines.delete_at(2), which deletes 
  the objest in the third position.

8) Reverse the positions of the stops in the array

  ["York Place", "Princes Street", "Haymarket", "Murrayfield Stadium", "Gyle Centre", "Airport"]

  I achieved this by doing; lines.reverse

9) Print out all of the stops using a for loop and a while loop

  This was the code that I used to print out all 
  the stops using a for loop:

    for stops in lines
      puts stops
    end

  This is the code that I used for the while loop"

    number_of_stops = 0

    while (number_of_stops<lines.length)
      puts lines[number_of_stops]
      number_of_stops+=1
    end







B. Given the following data structure:

my_hash = {0 => "Zero", 1 => "One", :two => "Two", "two" => 2}


1) How would you return the string "One"?

  puts my_hash[:1], this returns the value assosiated 
  with the key '1'

2) How would you return the string "Two"?

  puts my_hash[:2], again like before this will 
  return the value assossiated with the key '2'

3) How would you return the number 2?

  puts my_hash["two"], this will return the value 
  assossiated with the key '"two"'. This rewuires the 
  quotes as it is not a symbol.

4) How would you add {3 => "Three"} to the hash?

  my_hash[3] = "Three" will add this.

5) How would you add {:four => 4} to the hash?

  my_hash[":4"] = 4, will add this and it 
  requires the quotes as a symbol is a dumbed 
  down version of a string





C. Given the following data structure:

    users = {
      "Jonathan" => {
        :twitter => "jonnyt",
        :favourite_numbers => [12, 42, 75, 12, 5],
        :home_town => "Stirling",
        :pets => {
          "fluffy" => :cat,
          "fido" => :dog,
          "spike" => :dog
        }
      },
      "Erik" => {
        :twitter => "eriksf",
        :favourite_numbers => [8, 12, 24],
        :home_town => "Linithgow",
        :pets => {
          "nemo" => :fish,
          "kevin" => :fish,
          "spike" => :dog,
          "rupert" => :parrot
        }
      },
      "Avril" => {
        :twitter => "bridgpally",
        :favourite_numbers => [12, 14, 85, 88],
        :home_town => "Dunbar",
        :pets => {
          "colin" => :snake
        }
      },
    }


1) Return Jonathan's Twitter handle (i.e. the string "jonnyt")

  You would use: puts users ["Jonathan"][:twitter] as 
  this outpus the value assosciated with key twitter that is
  assosciated with the key Jonathon. 

2) Return Erik's hometown

  puts users ["Erik"][:home_town]:would do this in the
  same way that the previous question was handled.  

3) Return the array of Erik's favorite numbers

  puts users ["Erik"][:favourite_numbers] will achieve this

4) Return the type of Avril's pet Colin

  puts users ["Avril"][:pets]["colin"] will return this.

5) Return the smallest of Erik's favorite numbers

  answer = users ["Erik"][:favourite_numbers].sort
  puts answer[0] 

  will return this. Althought the array does not need ti be sorted 
  doing so is good practice and allows the code to be 
  adapted to fit other situations.

6) Return an array of Avril's favorite numbers that are even

  even_numbers = []

  answer = users ["Avril"][:favourite_numbers]

  for number in answer
    #
    if number.even?
      even_numbers.push(number) 
    end 

  end

  puts even_numbers

  Is the code that I have used to achieve this.
  This coed extracts the numbers in an array and then
  checks to see if each number is even in an if loop 
  and then impts them into a new array that has already 
  been created.

7) Return an array of Jonathans favourite numbers, sorted in ascending order and excluding duplicates

  answer = users ["Jonathan"][:favourite_numbers].sort.uniq
  puts answer

  This is what I have used to create this. The array is
  sorted with .sort, and the .uniq removes all duplicates.

8) Add the number 7 to Erik's favorite numbers

  users ["Erik"][:favourite_numbers].push(7)

  Will do this as it adds the number 7 to the end of 
  the favourite numbers string.

9) Change Erik's hometown to Edinburgh

  users ["Erik"][:home_town] = "Edinburgh"

  Will achieve this as it overwirtes the vale assigned with 
  the :home_town key with the new value Edinburgh

10) Add a pet dog to Erik called "Fluffy"

  users ["Erik"][:pets]["fluffy"] = :dog

  Will achieve this as it adds the value to :dog to a new key 
  "fluffy" in the pets key.

11) Add yourself to the users hash

  users["David"] = {twitter: "Dave", favourite_numbers: 7, home_town: "Kilwinning", pets: {"gary" => :goat}}


  Will add me to the users hash. This asigns the keys 
  and their vales to the key "David"
